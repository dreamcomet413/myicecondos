# this can be any application server, not just Unicorn/Rainbows!
upstream <%= "unicorn_#{application}_#{stage}" %>  {
  server unix:/tmp/unicorn.<%= "#{application}_#{stage}" %>.sock fail_timeout=0;
}

upstream unicorn_fat_free_crm_production  {
  server unix:/tmp/unicorn.fat_free_crm_production.sock fail_timeout=0;
}

server {
   listen       80;
   server_name  www.nicholasalli.com;
   rewrite ^ http://nicholasalli.com$request_uri? permanent;
}

server {
    listen       80;

    client_max_body_size 4G;
    server_name crm.nicholasalli.com;

    # ~2 seconds is often enough for most folks to parse HTML/CSS and
    # retrieve needed images/icons/frames, connections are cheap in
    # nginx so increasing this is generally safe...
    keepalive_timeout 5;

    # path for static files
    root /home/rails/fat_free_crm/current/public;

    location ^~ /assets/ {
      gzip_static on;
      expires max;
      add_header Cache-Control public;
    }

    # Prefer to serve static files directly from nginx to avoid unnecessary
    # data copies from the application server.
    #
    # try_files directive appeared in in nginx 0.7.27 and has stabilized
    # over time.  Older versions of nginx (e.g. 0.6.x) requires
    # "if (!-f $request_filename)" which was less efficient:
    # http://bogomips.org/unicorn.git/tree/examples/nginx.conf?id=v3.3.1#n127
    try_files $uri/index.html $uri.html $uri @app;

    # allow requests for images, js, css, and icons to go through
    # even if cap has been used to disable the site
    if ($request_filename ~* /(images|javascripts|stylehseets)/) { break; }
    if ($request_filename ~* \.ico$) { break; }

    location @app {
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        proxy_set_header X-Forwarded-Proto $scheme;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;

        proxy_pass http://unicorn_fat_free_crm_production;
    }

  	recursive_error_pages on;

  	if (-f $document_root/system/maintenance.html) {
   	  return 503;
  	}

  	error_page 404 /404.html;
  	error_page 500 502 504 /500.html;
  	error_page 503 @503;
  	location @503 {
   	  error_page 405 = /system/maintenance.html;

  	  # Serve static assets if found.
  	  if (-f $request_filename) {
  	    break;
  	  }

  	  rewrite ^(.*)$ /system/maintenance.html break;
  	}

  	location = /500.html {
    		root /home/rails/fat_free_crm/current/public;
  	}
}

server {
    listen       80;

    client_max_body_size 4G;
    server_name nicholasalli.com;

    # ~2 seconds is often enough for most folks to parse HTML/CSS and
    # retrieve needed images/icons/frames, connections are cheap in
    # nginx so increasing this is generally safe...
    keepalive_timeout 5;

    # path for static files
    root <%= current_path %>/public;

    location ^~ /assets/ {
      gzip_static on;
      expires max;
      add_header Cache-Control public;
    }

    # Prefer to serve static files directly from nginx to avoid unnecessary
    # data copies from the application server.
    #
    # try_files directive appeared in in nginx 0.7.27 and has stabilized
    # over time.  Older versions of nginx (e.g. 0.6.x) requires
    # "if (!-f $request_filename)" which was less efficient:
    # http://bogomips.org/unicorn.git/tree/examples/nginx.conf?id=v3.3.1#n127
    try_files $uri/index.html $uri.html $uri @app;

    # allow requests for images, js, css, and icons to go through
    # even if cap has been used to disable the site
    if ($request_filename ~* /(images|javascripts|stylehseets)/) { break; }
    if ($request_filename ~* \.ico$) { break; }

    location @app {
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        proxy_set_header X-Forwarded-Proto $scheme;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;

        proxy_pass http://<%= "unicorn_#{application}_#{stage}" %>;
    }

  	recursive_error_pages on;

  	if (-f $document_root/system/maintenance.html) {
   	  return 503;
  	}

  	error_page 404 /404.html;
  	error_page 500 502 504 /500.html;
  	error_page 503 @503;
  	location @503 {
   	  error_page 405 = /system/maintenance.html;

  	  # Serve static assets if found.
  	  if (-f $request_filename) {
  	    break;
  	  }

  	  rewrite ^(.*)$ /system/maintenance.html break;
  	}

  	location = /500.html {
    		root <%= current_path %>/public;
  	}
}
